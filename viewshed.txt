
def createPlacemark(id, area, perimeter,latlong):
  
	placemarkElement = kmlDoc.createElement('Placemark')
	extElement = kmlDoc.createElement('ExtendedData')
	placemarkElement.appendChild(extElement)
	schemaElement = kmlDoc.createElement('Schema')
	schemaElement.setAttribute('schemaUrl','#')
	extElement.appendChild(schemaElement)
	simpleFieldElement1=kmlDoc.createElement('SimpleField')
	simpleFieldElement1.setAttribute('name','id')
	nameText = kmlDoc.createTextNode(id)
	nameText= simpleFieldElement1.appendChild(nameText)
	simpleFieldElement1 = schemaElement.appendChild(simpleFieldElement1)
	
	simpleFieldElement2=kmlDoc.createElement('SimpleField')
	simpleFieldElement2.setAttribute('name','area')
	nameText1 = kmlDoc.createTextNode(area)
	nameText1= simpleFieldElement2.appendChild(nameText1)
	simpleFieldElement2 = schemaElement.appendChild(simpleFieldElement2)
	
	simpleFieldElement3=kmlDoc.createElement('SimpleField')
	simpleFieldElement3.setAttribute('name','perimeter')
	nameText2 = kmlDoc.createTextNode(perimeter)
	nameText2= simpleFieldElement3.appendChild(nameText2)
	simpleFieldElement3 = schemaElement.appendChild(simpleFieldElement3)
	
	polygonElement=kmlDoc.createElement('Polygon')
	placemarkElement.appendChild(polygonElement)
	extrudeElement=kmlDoc.createElement('extrude')
	polygonElement.appendChild(extrudeElement)
	extrudeText=kmlDoc.createTextNode('0')
	extrudeElement.appendChild(extrudeText)
	altitudeElement=kmlDoc.createElement('altitudemode')
	polygonElement.appendChild(altitudeElement)
	altitudeText=kmlDoc.createTextNode('relativeToGround')
	altitudeElement.appendChild(altitudeText)
	outerElement=kmlDoc.createElement('outerBoundaryIs')
	polygonElement.appendChild(outerElement)
	linearElement=kmlDoc.createElement('LinearRing')
	outerElement.appendChild(linearElement)
	coordinatesElement=kmlDoc.createElement('coordinates')
	linearElement.appendChild(coordinatesElement)
	
	latlong1=kmlDoc.createTextNode(latlong)
	coordinatesElement.appendChild(latlong1)
	latlong2=kmlDoc.createTextNode(latlong)
	coordinatesElement.appendChild(latlong2)
	latlong3=kmlDoc.createTextNode(latlong)
	coordinatesElement.appendChild(latlong3)
	latlong4=kmlDoc.createTextNode(latlong)
	coordinatesElement.appendChild(latlong4)

	return placemarkElement

def createKML(csvReader, fileName, order):
  # This constructs the KML document from the CSV file.
  kmlDoc = xml.dom.minidom.Document()
  
  
	simpleFieldElement=kmlDoc.createElement('SimpleField')
	simpleFieldElement.setAttribute('name','timestamp_1')
	simpleFieldElement.setAttribute('type','string')
	simpleFieldElement = schemaElement.appendChild(simpleFieldElement)
	
	simpleFieldElement1=kmlDoc.createElement('SimpleField')
	simpleFieldElement1.setAttribute('name','id')
	simpleFieldElement1.setAttribute('type','float')
	simpleFieldElement1 = schemaElement.appendChild(simpleFieldElement1)
	
	simpleFieldElement2=kmlDoc.createElement('SimpleField')
	simpleFieldElement2.setAttribute('name','area')
	simpleFieldElement2.setAttribute('type','float')
	simpleFieldElement2 = schemaElement.appendChild(simpleFieldElement2)
	
	simpleFieldElement3=kmlDoc.createElement('SimpleField')
	simpleFieldElement3.setAttribute('name','perimeter')
	simpleFieldElement3.setAttribute('type','float')
	simpleFieldElement3 = schemaElement.appendChild(simpleFieldElement3)
  
	documentElement1 = kmlDoc.createElement('Document')
	documentElement1.setAttribute('id','')
	documentElement1= documentElement.appendChild(documentElement1)
	
	nameElement=kmlDoc.createElement('name')
	nameElement= documentElement1.appendChild(nameElement)
	nameText = kmlDoc.createTextNode('')
	nameText= nameElement.appendChild(nameText)
	
	for i in range(1,size)
		placemarkElement = createPlacemark(id, area, perimeter,latlong)
		documentElement1.appendChild(placemarkElement)
  kmlFile = open(fileName, 'w')
  kmlFile.write(kmlDoc.toprettyxml('  ', newl = '\n', encoding = 'utf-8'))

def main():
  # This reader opens up 'google-addresses.csv', which should be replaced with your own.
  # It creates a KML file called 'google.kml'.
  
  # If an argument was passed to the script, it splits the argument on a comma
  # and uses the resulting list to specify an order for when columns get added.
  # Otherwise, it defaults to the order used in the sample.
  
  if len(sys.argv) >1: order = sys.argv[1].split(',')
  else: order = ['Office','Address1','Address2','Address3','City','State','Zip','Phone','Fax']
  csvreader = csv.DictReader(open('google-addresses.csv'),order)
  kml = createKML(csvreader, 'google-addresses.kml', order)
if __name__ == '__main__':
  main()